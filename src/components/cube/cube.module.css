.container {
  /* general css for the container, the cube-size variable will be changed with the other means to make it responsive */
  width: var(--cube-size);
  height: var(--cube-size);
}

/* base size for the container */
.container {
  --cube-size: var(--cube-css-size, var(--cube-parameter-size-base));
}

/* sm size */
@media (min-width: 640px) {
  .container {
    --cube-size: var(--cube-css-size, var(--cube-parameter-size-sm));
  }
}

/* md size */
@media (min-width: 768px) {
  .container {
    --cube-size: var(--cube-css-size, var(--cube-parameter-size-md));
  }
}

/* lg size */
@media (min-width: 1024px) {
  .container {
    --cube-size: var(--cube-css-size, var(--cube-parameter-size-lg));
  }
}

/* xl size */
@media (min-width: 1280px) {
  .container {
    --cube-size: var(--cube-css-size, var(--cube-parameter-size-xl));
  }
}

/* 2xl size */
@media (min-width: 1536px) {
  .container {
    --cube-size: var(--cube-css-size, var(--cube-parameter-size-2xl));
  }
}

.scene {
  width: var(--cube-size);
  height: var(--cube-size);
  perspective: var(--cube-perspective, none);
}

.cube {
  width: 100%;
  height: 100%;
  position: relative;
  transition-property: transform;
  transition-timing-function: var(
    --cube-transition-timing-function,
    cubic-bezier(0.4, 0, 0.2, 1)
  );
  transition-duration: var(--cube-transition-duration, 1s);
  transform-style: preserve-3d;
}

.face {
  position: absolute;
  width: 100%;
  height: 100%;
}

.show-front {
  transform: translateZ(calc(0px - var(--cube-size) / 2)) rotateY(0deg);
}

.show-right {
  transform: translateZ(calc(0px - var(--cube-size) / 2)) rotateY(-90deg);
}

.show-back {
  transform: translateZ(calc(0px - var(--cube-size) / 2)) rotateY(-180deg);
}
.show-left {
  transform: translateZ(calc(0px - var(--cube-size) / 2)) rotateY(90deg);
}

.show-top {
  transform: translateZ(calc(0px - var(--cube-size) / 2)) rotateX(-90deg);
}

.show-bottom {
  transform: translateZ(calc(0px - var(--cube-size) / 2)) rotateX(90deg);
}
.face-front {
  transform: rotateY(0deg) translateZ(calc(var(--cube-size) / 2));
}
.face-right {
  transform: rotateY(-90deg) translateZ(calc(var(--cube-size) / 2));
}

.face-back {
  transform: rotateY(-180deg) translateZ(calc(var(--cube-size) / 2));
}

.face-left {
  transform: rotateY(90deg) translateZ(calc(var(--cube-size) / 2));
}

.face-top {
  transform: rotateX(-90deg) translateZ(calc(var(--cube-size) / 2));
}

.face-bottom {
  transform: rotateX(90deg) translateZ(calc(var(--cube-size) / 2));
}
